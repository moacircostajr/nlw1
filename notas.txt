// instala os pacotes que transpilam código typescript em javascript
$ npm install ts-node typescript -D

// executa o script ts-node que faz a transpilação (faz o mesmo que ./node_modules/.bin/ts-node src/server.ts)
$ npx ts-node src/server.ts

// cria o arquivo de configuração do typescript
$ npx tsc --init

// instala o pacote que faz o hot reload
$ npm install -D ts-node-dev

// executa o script que faz o hot reload
$ npx ts-node-dev src/server.ts

// script que simplifica a execução do script que faz o hot reload
# package.json
...
"scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "dev": "ts-node-dev src/server.ts"
  },
...

// cria uma nova aplicação com ReactJs
$ npx create-react-app web --template=typescript

// exemplo de requisições rest para uso com o VSCODE REST Client
# .http
GET https://example.com/comments/1 HTTP/1.1

###

GET https://example.com/topics/1 HTTP/1.1

###

POST https://example.com/comments HTTP/1.1
content-type: application/json

{
    "name": "sample",
    "time": "Wed, 21 Oct 2015 18:27:50 GMT"
}


// Rota: Endereço completo da requisição
// Recurso: Qual entidade estamos acessando do sistema

// Request Param: Parâmetros que vem na própria rota que identificam um recurso
// Query Param: Parâmetros que vêm na própria rota, opcionais, separados por ponto de interrogação, usados para filtragem e/ou paginação
// Request Body: Parâmetros para criação/atualização de informações

// SELECT * FROM users WHERE name = 'Diego'
// knex('users').where('name', 'Diego').select('*')

// BOOTSTRAP
import express from 'express'

const app = express()
app.use(express.json())

const users = [
  'Diego',
  'Cleiton',
  'Robson',
  'Daniel'
]

app.get('/users', (request, response) => {
  const search = String(request.query.search)
  console.log(search)
  const filteredUsers = search ? users.filter(user => user.includes(search)) : users
  // response.send('Hello World!')
  // JSON
  return response.json(filteredUsers)
})

app.get('/users/:id', (request, response) => {
  const id = Number(request.params.id)
  const user = users[id]
  return response.json(user)
})

app.post('/users', (request, response) => {
  const data = request.body
  console.log(data)
  const user = {
    name: data.name,
    email: data.email
  }
  return response.json(user)
})

app.listen(3333)

// instala pacote knex para dar suporte a múltiplos bancos de dados
$ npm install knex

// instala pacote de banco de dados sqlite
$ npm install sqlite3

// atualiza npm
$ npm install -g npm@latest

// executa as migrations no knex
$ npx knex migrate:latest --knexfile knexfile.ts migrate:latest